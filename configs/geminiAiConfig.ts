import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || "";

const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

//   async function run() {

// This is the chat session for generating course content using the GEMINI model
export const courseContentGenChatSession = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: '  Create a comprehensive course tutorial on "Development" category on topic: "javascript" for beginner level learners.\n  This is some description or some context about the course: This is will a complete beginner course on javascript .\n  The course must be 2 hours long and should have 12 chapters with video content included in JSON format\n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '## JavaScript for Beginners: A 2-Hour Crash Course\n\n**Course Description:** This comprehensive beginner-friendly course will guide you through the fundamentals of JavaScript, equipping you with the essential knowledge to start building interactive web applications. We\'ll cover everything from the basics of syntax and data types to working with variables, functions, loops, and more. \n\n**Course Duration:** 2 hours (12 Chapters)\n\n**Target Audience:**  Complete beginners with no prior programming experience.\n\n**Format:** Each chapter includes a video explaining the concept, followed by practice exercises and code snippets for hands-on learning. \n\n**Course Content:**\n\n**Chapter 1: Introduction to JavaScript (10 Minutes)**\n\n* **Video:**  What is JavaScript? Why learn it? JavaScript\'s role in web development. \n* **Content:**\n    * Defining JavaScript.\n    * Benefits of learning JavaScript.\n    * Examples of JavaScript applications.\n    * Setting up your development environment (text editor, browser console).\n\n**Chapter 2: JavaScript Basics (15 Minutes)**\n\n* **Video:**  Understanding the core elements of JavaScript syntax, variables, and data types.\n* **Content:**\n    * JavaScript syntax: comments, case sensitivity, and reserved keywords.\n    * Variables: declaring and assigning values.\n    * Data types: numbers, strings, booleans, null, and undefined.\n\n**Chapter 3: Operators and Expressions (15 Minutes)**\n\n* **Video:**  Exploring different types of operators for calculations, comparisons, and logical operations.\n* **Content:**\n    * Arithmetic operators: +, -, *, /, %, **.\n    * Comparison operators: ==, !=, >, <, >=, <=.\n    * Logical operators: && (AND), || (OR), ! (NOT).\n    * Expressions and operator precedence.\n\n**Chapter 4: Control Flow: Conditional Statements (15 Minutes)**\n\n* **Video:**  Controlling the execution flow using conditional statements (if, else, else if).\n* **Content:**\n    * The if statement: executing code based on a condition.\n    * The else statement: executing code when the if condition is false.\n    * The else if statement: handling multiple conditions.\n    * Nested if statements.\n\n**Chapter 5: Control Flow: Loops (15 Minutes)**\n\n* **Video:**  Understanding how to repeat code blocks using loops (for, while, do-while).\n* **Content:**\n    * The for loop: iterating over a specific range.\n    * The while loop: repeating code as long as a condition is true.\n    * The do-while loop: executing code at least once, then repeating based on a condition.\n\n**Chapter 6: Functions (20 Minutes)**\n\n* **Video:**  Defining reusable code blocks with functions and understanding parameters and return values.\n* **Content:**\n    * Defining and calling functions.\n    * Parameters and arguments.\n    * Return values.\n    * Function scope and hoisting.\n\n**Chapter 7: Arrays (20 Minutes)**\n\n* **Video:**  Working with ordered lists of data using arrays.\n* **Content:**\n    * Creating arrays and accessing elements.\n    * Modifying array elements.\n    * Array methods: push, pop, shift, unshift, splice.\n    * Iterating over arrays with loops.\n\n**Chapter 8: Objects (20 Minutes)**\n\n* **Video:**  Storing and organizing data with objects.\n* **Content:**\n    * Creating objects with key-value pairs.\n    * Accessing object properties.\n    * Modifying object properties.\n    * Object methods.\n    * JSON (JavaScript Object Notation).\n\n**Chapter 9: Strings (15 Minutes)**\n\n* **Video:**  Manipulating and working with text strings.\n* **Content:**\n    * String literals and escape characters.\n    * String methods: length, charAt, indexOf, substring, slice, replace.\n    * Concatenating strings.\n\n**Chapter 10: DOM Manipulation (20 Minutes)**\n\n* **Video:**  Interacting with HTML elements using the Document Object Model (DOM).\n* **Content:**\n    * Understanding the DOM.\n    * Selecting HTML elements using selectors.\n    * Modifying HTML elements: text content, attributes, styles.\n    * Adding and removing elements.\n    * Event handling.\n\n**Chapter 11: Introduction to JavaScript Libraries (15 Minutes)**\n\n* **Video:**  Discovering the power of JavaScript libraries like jQuery and React.\n* **Content:**\n    * Understanding the concept of libraries.\n    * Why use JavaScript libraries.\n    * Introducing jQuery and React.\n\n**Chapter 12: Practice and Resources (10 Minutes)**\n\n* **Video:**  Review of key concepts, practice exercises, and resources for further learning.\n* **Content:**\n    * Recap of important topics.\n    * Practice projects and coding challenges.\n    * Recommended resources for continued learning (books, websites, online courses).\n\n**JSON Format:**\n\n```json\n{\n  "course_title": "JavaScript for Beginners: A 2-Hour Crash Course",\n  "duration": "2 hours",\n  "chapters": [\n    {\n      "title": "Introduction to JavaScript",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter1.mp4"\n    },\n    {\n      "title": "JavaScript Basics",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter2.mp4"\n    },\n    {\n      "title": "Operators and Expressions",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter3.mp4"\n    },\n    {\n      "title": "Control Flow: Conditional Statements",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter4.mp4"\n    },\n    {\n      "title": "Control Flow: Loops",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter5.mp4"\n    },\n    {\n      "title": "Functions",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter6.mp4"\n    },\n    {\n      "title": "Arrays",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter7.mp4"\n    },\n    {\n      "title": "Objects",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter8.mp4"\n    },\n    {\n      "title": "Strings",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter9.mp4"\n    },\n    {\n      "title": "DOM Manipulation",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter10.mp4"\n    },\n    {\n      "title": "Introduction to JavaScript Libraries",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter11.mp4"\n    },\n    {\n      "title": "Practice and Resources",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter12.mp4"\n    }\n  ]\n}\n```\n\n**Note:** You\'ll need to replace the placeholder video URLs with the actual links to your video content. \n\nThis comprehensive course outline and JSON format provide a solid foundation for creating your JavaScript beginner course. Remember to make your video content engaging, clear, and accessible to complete beginners, and include interactive elements like practice exercises and code snippets for effective learning. \n',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: '  Create a comprehensive course tutorial on "Development" category on topic: "javascript" for beginner level learners.\n  This is some description or some context about the course: This is will a complete beginner course on javascript .\n  The course must be 2 hours long and should have 12 chapters in JSON format. Also include course title and description in that JSON format.\n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "JavaScript for Beginners: A 2-Hour Crash Course",\n  "course_description": "This comprehensive beginner-friendly course will guide you through the fundamentals of JavaScript, equipping you with the essential knowledge to start building interactive web applications. We\'ll cover everything from the basics of syntax and data types to working with variables, functions, loops, and more.",\n  "chapters": [\n    {\n      "title": "Introduction to JavaScript",\n      "description": "What is JavaScript? Why learn it? JavaScript\'s role in web development. Setting up your development environment.",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter1.mp4",\n      "content": [\n        "Defining JavaScript.",\n        "Benefits of learning JavaScript.",\n        "Examples of JavaScript applications.",\n        "Setting up your development environment (text editor, browser console)."\n      ]\n    },\n    {\n      "title": "JavaScript Basics",\n      "description": "Understanding the core elements of JavaScript syntax, variables, and data types.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter2.mp4",\n      "content": [\n        "JavaScript syntax: comments, case sensitivity, and reserved keywords.",\n        "Variables: declaring and assigning values.",\n        "Data types: numbers, strings, booleans, null, and undefined."\n      ]\n    },\n    {\n      "title": "Operators and Expressions",\n      "description": "Exploring different types of operators for calculations, comparisons, and logical operations.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter3.mp4",\n      "content": [\n        "Arithmetic operators: +, -, *, /, %, **.",\n        "Comparison operators: ==, !=, >, <, >=, <=.",\n        "Logical operators: && (AND), || (OR), ! (NOT).",\n        "Expressions and operator precedence."\n      ]\n    },\n    {\n      "title": "Control Flow: Conditional Statements",\n      "description": "Controlling the execution flow using conditional statements (if, else, else if).",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter4.mp4",\n      "content": [\n        "The if statement: executing code based on a condition.",\n        "The else statement: executing code when the if condition is false.",\n        "The else if statement: handling multiple conditions.",\n        "Nested if statements."\n      ]\n    },\n    {\n      "title": "Control Flow: Loops",\n      "description": "Understanding how to repeat code blocks using loops (for, while, do-while).",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter5.mp4",\n      "content": [\n        "The for loop: iterating over a specific range.",\n        "The while loop: repeating code as long as a condition is true.",\n        "The do-while loop: executing code at least once, then repeating based on a condition."\n      ]\n    },\n    {\n      "title": "Functions",\n      "description": "Defining reusable code blocks with functions and understanding parameters and return values.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter6.mp4",\n      "content": [\n        "Defining and calling functions.",\n        "Parameters and arguments.",\n        "Return values.",\n        "Function scope and hoisting."\n      ]\n    },\n    {\n      "title": "Arrays",\n      "description": "Working with ordered lists of data using arrays.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter7.mp4",\n      "content": [\n        "Creating arrays and accessing elements.",\n        "Modifying array elements.",\n        "Array methods: push, pop, shift, unshift, splice.",\n        "Iterating over arrays with loops."\n      ]\n    },\n    {\n      "title": "Objects",\n      "description": "Storing and organizing data with objects.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter8.mp4",\n      "content": [\n        "Creating objects with key-value pairs.",\n        "Accessing object properties.",\n        "Modifying object properties.",\n        "Object methods.",\n        "JSON (JavaScript Object Notation)."\n      ]\n    },\n    {\n      "title": "Strings",\n      "description": "Manipulating and working with text strings.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter9.mp4",\n      "content": [\n        "String literals and escape characters.",\n        "String methods: length, charAt, indexOf, substring, slice, replace.",\n        "Concatenating strings."\n      ]\n    },\n    {\n      "title": "DOM Manipulation",\n      "description": "Interacting with HTML elements using the Document Object Model (DOM).",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter10.mp4",\n      "content": [\n        "Understanding the DOM.",\n        "Selecting HTML elements using selectors.",\n        "Modifying HTML elements: text content, attributes, styles.",\n        "Adding and removing elements.",\n        "Event handling."\n      ]\n    },\n    {\n      "title": "Introduction to JavaScript Libraries",\n      "description": "Discovering the power of JavaScript libraries like jQuery and React.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter11.mp4",\n      "content": [\n        "Understanding the concept of libraries.",\n        "Why use JavaScript libraries.",\n        "Introducing jQuery and React."\n      ]\n    },\n    {\n      "title": "Practice and Resources",\n      "description": "Review of key concepts, practice exercises, and resources for further learning.",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter12.mp4",\n      "content": [\n        "Recap of important topics.",\n        "Practice projects and coding challenges.",\n        "Recommended resources for continued learning (books, websites, online courses)."\n      ]\n    }\n  ]\n}\n```\n\n**Explanation of the JSON Structure:**\n\n* **course_title:** The name of the course.\n* **course_description:** A brief summary of the course content and target audience.\n* **chapters:** An array containing information about each chapter. \n    * **title:** The title of the chapter.\n    * **description:** A short description of the chapter\'s content.\n    * **duration:**  The estimated time for the chapter.\n    * **video_url:**  A URL to the video content for the chapter.\n    * **content:** An array of bullet points outlining the key topics covered in the chapter.\n\n**Remember to replace the placeholder video URLs with the actual links to your video content.** This JSON structure is a good starting point for organizing your JavaScript beginner course.  Make sure you provide engaging videos, clear explanations, and practice exercises for an effective learning experience.\n',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: 'Create a comprehensive course tutorial on "Development" category on topic: "javascript" for beginner level learners.\n  This is some description or some context about the course: This is will a complete beginner course on javascript .\n  The course must be 2 hours long and should have 12 chapters in JSON format. Also include course title, description, category and level as fields in that JSON format.',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "JavaScript for Beginners: A 2-Hour Crash Course",\n  "course_description": "This comprehensive beginner-friendly course will guide you through the fundamentals of JavaScript, equipping you with the essential knowledge to start building interactive web applications. We\'ll cover everything from the basics of syntax and data types to working with variables, functions, loops, and more.",\n  "category": "Development",\n  "level": "Beginner",\n  "chapters": [\n    {\n      "title": "Introduction to JavaScript",\n      "description": "What is JavaScript? Why learn it? JavaScript\'s role in web development. Setting up your development environment.",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter1.mp4",\n      "content": [\n        "Defining JavaScript.",\n        "Benefits of learning JavaScript.",\n        "Examples of JavaScript applications.",\n        "Setting up your development environment (text editor, browser console)."\n      ]\n    },\n    {\n      "title": "JavaScript Basics",\n      "description": "Understanding the core elements of JavaScript syntax, variables, and data types.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter2.mp4",\n      "content": [\n        "JavaScript syntax: comments, case sensitivity, and reserved keywords.",\n        "Variables: declaring and assigning values.",\n        "Data types: numbers, strings, booleans, null, and undefined."\n      ]\n    },\n    {\n      "title": "Operators and Expressions",\n      "description": "Exploring different types of operators for calculations, comparisons, and logical operations.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter3.mp4",\n      "content": [\n        "Arithmetic operators: +, -, *, /, %, **.",\n        "Comparison operators: ==, !=, >, <, >=, <=.",\n        "Logical operators: && (AND), || (OR), ! (NOT).",\n        "Expressions and operator precedence."\n      ]\n    },\n    {\n      "title": "Control Flow: Conditional Statements",\n      "description": "Controlling the execution flow using conditional statements (if, else, else if).",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter4.mp4",\n      "content": [\n        "The if statement: executing code based on a condition.",\n        "The else statement: executing code when the if condition is false.",\n        "The else if statement: handling multiple conditions.",\n        "Nested if statements."\n      ]\n    },\n    {\n      "title": "Control Flow: Loops",\n      "description": "Understanding how to repeat code blocks using loops (for, while, do-while).",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter5.mp4",\n      "content": [\n        "The for loop: iterating over a specific range.",\n        "The while loop: repeating code as long as a condition is true.",\n        "The do-while loop: executing code at least once, then repeating based on a condition."\n      ]\n    },\n    {\n      "title": "Functions",\n      "description": "Defining reusable code blocks with functions and understanding parameters and return values.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter6.mp4",\n      "content": [\n        "Defining and calling functions.",\n        "Parameters and arguments.",\n        "Return values.",\n        "Function scope and hoisting."\n      ]\n    },\n    {\n      "title": "Arrays",\n      "description": "Working with ordered lists of data using arrays.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter7.mp4",\n      "content": [\n        "Creating arrays and accessing elements.",\n        "Modifying array elements.",\n        "Array methods: push, pop, shift, unshift, splice.",\n        "Iterating over arrays with loops."\n      ]\n    },\n    {\n      "title": "Objects",\n      "description": "Storing and organizing data with objects.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter8.mp4",\n      "content": [\n        "Creating objects with key-value pairs.",\n        "Accessing object properties.",\n        "Modifying object properties.",\n        "Object methods.",\n        "JSON (JavaScript Object Notation)."\n      ]\n    },\n    {\n      "title": "Strings",\n      "description": "Manipulating and working with text strings.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter9.mp4",\n      "content": [\n        "String literals and escape characters.",\n        "String methods: length, charAt, indexOf, substring, slice, replace.",\n        "Concatenating strings."\n      ]\n    },\n    {\n      "title": "DOM Manipulation",\n      "description": "Interacting with HTML elements using the Document Object Model (DOM).",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter10.mp4",\n      "content": [\n        "Understanding the DOM.",\n        "Selecting HTML elements using selectors.",\n        "Modifying HTML elements: text content, attributes, styles.",\n        "Adding and removing elements.",\n        "Event handling."\n      ]\n    },\n    {\n      "title": "Introduction to JavaScript Libraries",\n      "description": "Discovering the power of JavaScript libraries like jQuery and React.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter11.mp4",\n      "content": [\n        "Understanding the concept of libraries.",\n        "Why use JavaScript libraries.",\n        "Introducing jQuery and React."\n      ]\n    },\n    {\n      "title": "Practice and Resources",\n      "description": "Review of key concepts, practice exercises, and resources for further learning.",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter12.mp4",\n      "content": [\n        "Recap of important topics.",\n        "Practice projects and coding challenges.",\n        "Recommended resources for continued learning (books, websites, online courses)."\n      ]\n    }\n  ]\n}\n```\n\n**Explanation of the JSON Structure:**\n\n* **course_title:** The name of the course.\n* **course_description:** A brief summary of the course content and target audience.\n* **category:** The category the course belongs to (in this case, "Development").\n* **level:** The skill level required for the course (in this case, "Beginner").\n* **chapters:** An array containing information about each chapter. \n    * **title:** The title of the chapter.\n    * **description:** A short description of the chapter\'s content.\n    * **duration:**  The estimated time for the chapter.\n    * **video_url:**  A URL to the video content for the chapter.\n    * **content:** An array of bullet points outlining the key topics covered in the chapter.\n\n**Remember to replace the placeholder video URLs with the actual links to your video content.** This JSON structure is a good starting point for organizing your JavaScript beginner course.  Make sure you provide engaging videos, clear explanations, and practice exercises for an effective learning experience. \n',
        },
      ],
    },
  ],
});

export const chapterContentGenSession = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Explain the concept on topic: "java course for beginners", chapter: "introduction to java" with detailed explanation on given chapter and return a string response with where explanation content is written in markdown style. Also include code example or diagram example if applicable. Don\'t include the chapterName or the topicName or any other things into the markdown response just exoplaination text. For more context on the topic you can follow this description: "${topicDescription}" to improve the content quality. Content example: "# Here\'s a Heading". Follow the markdown syntax for the content just like the example provided',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '##  Welcome to the World of Java!\n\nJava is a powerful, versatile programming language used to build a wide range of applications, from mobile apps and web services to enterprise software and games. It\'s known for its platform independence (code runs on any system with a Java Virtual Machine) and its object-oriented nature.\n\n### Key Concepts for Beginners:\n\n* **What is Java?**  Java is a high-level, object-oriented programming language designed to be platform-independent. This means you can write Java code once and run it on different operating systems (Windows, macOS, Linux) without modification.\n\n* **Object-Oriented Programming (OOP):**  OOP is a programming paradigm that structures code around objects. Objects represent real-world entities, and they have properties (data) and behaviors (methods). \n\n    * **Classes:** Blueprints for creating objects. They define the structure and behavior of objects.\n    * **Objects:** Instances of classes. They have their own specific data and can interact with other objects.\n\n* **The Java Virtual Machine (JVM):**  The JVM is a software program that runs Java bytecode (compiled Java code). It acts as a bridge between your Java code and the underlying operating system.\n\n###  Basic Building Blocks of Java:\n\n* **Data Types:**  Java uses different data types to store various kinds of information:\n    * **Primitive Types:**  Basic data types like `int` (integers), `double` (floating-point numbers), `char` (characters), `boolean` (true/false values).\n    * **Reference Types:**  Represent objects and complex data structures.\n* **Variables:**  Named containers that hold data values.\n* **Operators:**  Symbols used to perform operations on data.\n* **Control Flow:**  Statements that control the execution of your code, like:\n    * **`if` statements:** Execute code based on a condition.\n    * **`for` loops:** Repeat a block of code a specific number of times.\n    * **`while` loops:** Repeat a block of code as long as a condition is true.\n\n### Simple Java Program Example:\n\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}\n```\n\n**Explanation:**\n\n1.  **`public class HelloWorld`:** Declares a class named `HelloWorld`. This is the starting point of your program.\n2.  **`public static void main(String[] args)`:**  The `main` method is the entry point of your Java program. It\'s where execution begins.\n3.  **`System.out.println("Hello, World!");`:**  This line prints the text "Hello, World!" to the console. \n\n**Let\'s break this down further:**\n\n* **Class:** A blueprint for creating objects, defining their structure and behavior.\n* **Method:** A block of code that performs a specific task. The `main` method is a special method used to start your program.\n* **`System.out.println()`:**  A method that prints output to the console.\n\nThis is just a starting point! There\'s much more to learn in the exciting world of Java programming. From working with variables and data types to understanding object-oriented concepts like inheritance and polymorphism, there\'s a vast landscape of knowledge to explore.  \n',
        },
      ],
    },
  ],
});
