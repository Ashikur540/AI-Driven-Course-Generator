import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || "";
console.log("apiKey", apiKey);
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

//   async function run() {

// This is the chat session for generating course content using the GEMINI model
export const courseContentGenChatSession = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: '  Create a comprehensive course tutorial on "Development" category on topic: "javascript" for beginner level learners.\n  This is some description or some context about the course: This is will a complete beginner course on javascript .\n  The course must be 2 hours long and should have 12 chapters with video content included in JSON format\n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '## JavaScript for Beginners: A 2-Hour Crash Course\n\n**Course Description:** This comprehensive beginner-friendly course will guide you through the fundamentals of JavaScript, equipping you with the essential knowledge to start building interactive web applications. We\'ll cover everything from the basics of syntax and data types to working with variables, functions, loops, and more. \n\n**Course Duration:** 2 hours (12 Chapters)\n\n**Target Audience:**  Complete beginners with no prior programming experience.\n\n**Format:** Each chapter includes a video explaining the concept, followed by practice exercises and code snippets for hands-on learning. \n\n**Course Content:**\n\n**Chapter 1: Introduction to JavaScript (10 Minutes)**\n\n* **Video:**  What is JavaScript? Why learn it? JavaScript\'s role in web development. \n* **Content:**\n    * Defining JavaScript.\n    * Benefits of learning JavaScript.\n    * Examples of JavaScript applications.\n    * Setting up your development environment (text editor, browser console).\n\n**Chapter 2: JavaScript Basics (15 Minutes)**\n\n* **Video:**  Understanding the core elements of JavaScript syntax, variables, and data types.\n* **Content:**\n    * JavaScript syntax: comments, case sensitivity, and reserved keywords.\n    * Variables: declaring and assigning values.\n    * Data types: numbers, strings, booleans, null, and undefined.\n\n**Chapter 3: Operators and Expressions (15 Minutes)**\n\n* **Video:**  Exploring different types of operators for calculations, comparisons, and logical operations.\n* **Content:**\n    * Arithmetic operators: +, -, *, /, %, **.\n    * Comparison operators: ==, !=, >, <, >=, <=.\n    * Logical operators: && (AND), || (OR), ! (NOT).\n    * Expressions and operator precedence.\n\n**Chapter 4: Control Flow: Conditional Statements (15 Minutes)**\n\n* **Video:**  Controlling the execution flow using conditional statements (if, else, else if).\n* **Content:**\n    * The if statement: executing code based on a condition.\n    * The else statement: executing code when the if condition is false.\n    * The else if statement: handling multiple conditions.\n    * Nested if statements.\n\n**Chapter 5: Control Flow: Loops (15 Minutes)**\n\n* **Video:**  Understanding how to repeat code blocks using loops (for, while, do-while).\n* **Content:**\n    * The for loop: iterating over a specific range.\n    * The while loop: repeating code as long as a condition is true.\n    * The do-while loop: executing code at least once, then repeating based on a condition.\n\n**Chapter 6: Functions (20 Minutes)**\n\n* **Video:**  Defining reusable code blocks with functions and understanding parameters and return values.\n* **Content:**\n    * Defining and calling functions.\n    * Parameters and arguments.\n    * Return values.\n    * Function scope and hoisting.\n\n**Chapter 7: Arrays (20 Minutes)**\n\n* **Video:**  Working with ordered lists of data using arrays.\n* **Content:**\n    * Creating arrays and accessing elements.\n    * Modifying array elements.\n    * Array methods: push, pop, shift, unshift, splice.\n    * Iterating over arrays with loops.\n\n**Chapter 8: Objects (20 Minutes)**\n\n* **Video:**  Storing and organizing data with objects.\n* **Content:**\n    * Creating objects with key-value pairs.\n    * Accessing object properties.\n    * Modifying object properties.\n    * Object methods.\n    * JSON (JavaScript Object Notation).\n\n**Chapter 9: Strings (15 Minutes)**\n\n* **Video:**  Manipulating and working with text strings.\n* **Content:**\n    * String literals and escape characters.\n    * String methods: length, charAt, indexOf, substring, slice, replace.\n    * Concatenating strings.\n\n**Chapter 10: DOM Manipulation (20 Minutes)**\n\n* **Video:**  Interacting with HTML elements using the Document Object Model (DOM).\n* **Content:**\n    * Understanding the DOM.\n    * Selecting HTML elements using selectors.\n    * Modifying HTML elements: text content, attributes, styles.\n    * Adding and removing elements.\n    * Event handling.\n\n**Chapter 11: Introduction to JavaScript Libraries (15 Minutes)**\n\n* **Video:**  Discovering the power of JavaScript libraries like jQuery and React.\n* **Content:**\n    * Understanding the concept of libraries.\n    * Why use JavaScript libraries.\n    * Introducing jQuery and React.\n\n**Chapter 12: Practice and Resources (10 Minutes)**\n\n* **Video:**  Review of key concepts, practice exercises, and resources for further learning.\n* **Content:**\n    * Recap of important topics.\n    * Practice projects and coding challenges.\n    * Recommended resources for continued learning (books, websites, online courses).\n\n**JSON Format:**\n\n```json\n{\n  "course_title": "JavaScript for Beginners: A 2-Hour Crash Course",\n  "duration": "2 hours",\n  "chapters": [\n    {\n      "title": "Introduction to JavaScript",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter1.mp4"\n    },\n    {\n      "title": "JavaScript Basics",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter2.mp4"\n    },\n    {\n      "title": "Operators and Expressions",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter3.mp4"\n    },\n    {\n      "title": "Control Flow: Conditional Statements",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter4.mp4"\n    },\n    {\n      "title": "Control Flow: Loops",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter5.mp4"\n    },\n    {\n      "title": "Functions",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter6.mp4"\n    },\n    {\n      "title": "Arrays",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter7.mp4"\n    },\n    {\n      "title": "Objects",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter8.mp4"\n    },\n    {\n      "title": "Strings",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter9.mp4"\n    },\n    {\n      "title": "DOM Manipulation",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter10.mp4"\n    },\n    {\n      "title": "Introduction to JavaScript Libraries",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter11.mp4"\n    },\n    {\n      "title": "Practice and Resources",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter12.mp4"\n    }\n  ]\n}\n```\n\n**Note:** You\'ll need to replace the placeholder video URLs with the actual links to your video content. \n\nThis comprehensive course outline and JSON format provide a solid foundation for creating your JavaScript beginner course. Remember to make your video content engaging, clear, and accessible to complete beginners, and include interactive elements like practice exercises and code snippets for effective learning. \n',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: '  Create a comprehensive course tutorial on "Development" category on topic: "javascript" for beginner level learners.\n  This is some description or some context about the course: This is will a complete beginner course on javascript .\n  The course must be 2 hours long and should have 12 chapters in JSON format. Also include course title and description in that JSON format.\n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "JavaScript for Beginners: A 2-Hour Crash Course",\n  "course_description": "This comprehensive beginner-friendly course will guide you through the fundamentals of JavaScript, equipping you with the essential knowledge to start building interactive web applications. We\'ll cover everything from the basics of syntax and data types to working with variables, functions, loops, and more.",\n  "chapters": [\n    {\n      "title": "Introduction to JavaScript",\n      "description": "What is JavaScript? Why learn it? JavaScript\'s role in web development. Setting up your development environment.",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter1.mp4",\n      "content": [\n        "Defining JavaScript.",\n        "Benefits of learning JavaScript.",\n        "Examples of JavaScript applications.",\n        "Setting up your development environment (text editor, browser console)."\n      ]\n    },\n    {\n      "title": "JavaScript Basics",\n      "description": "Understanding the core elements of JavaScript syntax, variables, and data types.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter2.mp4",\n      "content": [\n        "JavaScript syntax: comments, case sensitivity, and reserved keywords.",\n        "Variables: declaring and assigning values.",\n        "Data types: numbers, strings, booleans, null, and undefined."\n      ]\n    },\n    {\n      "title": "Operators and Expressions",\n      "description": "Exploring different types of operators for calculations, comparisons, and logical operations.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter3.mp4",\n      "content": [\n        "Arithmetic operators: +, -, *, /, %, **.",\n        "Comparison operators: ==, !=, >, <, >=, <=.",\n        "Logical operators: && (AND), || (OR), ! (NOT).",\n        "Expressions and operator precedence."\n      ]\n    },\n    {\n      "title": "Control Flow: Conditional Statements",\n      "description": "Controlling the execution flow using conditional statements (if, else, else if).",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter4.mp4",\n      "content": [\n        "The if statement: executing code based on a condition.",\n        "The else statement: executing code when the if condition is false.",\n        "The else if statement: handling multiple conditions.",\n        "Nested if statements."\n      ]\n    },\n    {\n      "title": "Control Flow: Loops",\n      "description": "Understanding how to repeat code blocks using loops (for, while, do-while).",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter5.mp4",\n      "content": [\n        "The for loop: iterating over a specific range.",\n        "The while loop: repeating code as long as a condition is true.",\n        "The do-while loop: executing code at least once, then repeating based on a condition."\n      ]\n    },\n    {\n      "title": "Functions",\n      "description": "Defining reusable code blocks with functions and understanding parameters and return values.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter6.mp4",\n      "content": [\n        "Defining and calling functions.",\n        "Parameters and arguments.",\n        "Return values.",\n        "Function scope and hoisting."\n      ]\n    },\n    {\n      "title": "Arrays",\n      "description": "Working with ordered lists of data using arrays.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter7.mp4",\n      "content": [\n        "Creating arrays and accessing elements.",\n        "Modifying array elements.",\n        "Array methods: push, pop, shift, unshift, splice.",\n        "Iterating over arrays with loops."\n      ]\n    },\n    {\n      "title": "Objects",\n      "description": "Storing and organizing data with objects.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter8.mp4",\n      "content": [\n        "Creating objects with key-value pairs.",\n        "Accessing object properties.",\n        "Modifying object properties.",\n        "Object methods.",\n        "JSON (JavaScript Object Notation)."\n      ]\n    },\n    {\n      "title": "Strings",\n      "description": "Manipulating and working with text strings.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter9.mp4",\n      "content": [\n        "String literals and escape characters.",\n        "String methods: length, charAt, indexOf, substring, slice, replace.",\n        "Concatenating strings."\n      ]\n    },\n    {\n      "title": "DOM Manipulation",\n      "description": "Interacting with HTML elements using the Document Object Model (DOM).",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter10.mp4",\n      "content": [\n        "Understanding the DOM.",\n        "Selecting HTML elements using selectors.",\n        "Modifying HTML elements: text content, attributes, styles.",\n        "Adding and removing elements.",\n        "Event handling."\n      ]\n    },\n    {\n      "title": "Introduction to JavaScript Libraries",\n      "description": "Discovering the power of JavaScript libraries like jQuery and React.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter11.mp4",\n      "content": [\n        "Understanding the concept of libraries.",\n        "Why use JavaScript libraries.",\n        "Introducing jQuery and React."\n      ]\n    },\n    {\n      "title": "Practice and Resources",\n      "description": "Review of key concepts, practice exercises, and resources for further learning.",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter12.mp4",\n      "content": [\n        "Recap of important topics.",\n        "Practice projects and coding challenges.",\n        "Recommended resources for continued learning (books, websites, online courses)."\n      ]\n    }\n  ]\n}\n```\n\n**Explanation of the JSON Structure:**\n\n* **course_title:** The name of the course.\n* **course_description:** A brief summary of the course content and target audience.\n* **chapters:** An array containing information about each chapter. \n    * **title:** The title of the chapter.\n    * **description:** A short description of the chapter\'s content.\n    * **duration:**  The estimated time for the chapter.\n    * **video_url:**  A URL to the video content for the chapter.\n    * **content:** An array of bullet points outlining the key topics covered in the chapter.\n\n**Remember to replace the placeholder video URLs with the actual links to your video content.** This JSON structure is a good starting point for organizing your JavaScript beginner course.  Make sure you provide engaging videos, clear explanations, and practice exercises for an effective learning experience.\n',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: 'Create a comprehensive course tutorial on "Development" category on topic: "javascript" for beginner level learners.\n  This is some description or some context about the course: This is will a complete beginner course on javascript .\n  The course must be 2 hours long and should have 12 chapters in JSON format. Also include course title, description, category and level as fields in that JSON format.',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "JavaScript for Beginners: A 2-Hour Crash Course",\n  "course_description": "This comprehensive beginner-friendly course will guide you through the fundamentals of JavaScript, equipping you with the essential knowledge to start building interactive web applications. We\'ll cover everything from the basics of syntax and data types to working with variables, functions, loops, and more.",\n  "category": "Development",\n  "level": "Beginner",\n  "chapters": [\n    {\n      "title": "Introduction to JavaScript",\n      "description": "What is JavaScript? Why learn it? JavaScript\'s role in web development. Setting up your development environment.",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter1.mp4",\n      "content": [\n        "Defining JavaScript.",\n        "Benefits of learning JavaScript.",\n        "Examples of JavaScript applications.",\n        "Setting up your development environment (text editor, browser console)."\n      ]\n    },\n    {\n      "title": "JavaScript Basics",\n      "description": "Understanding the core elements of JavaScript syntax, variables, and data types.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter2.mp4",\n      "content": [\n        "JavaScript syntax: comments, case sensitivity, and reserved keywords.",\n        "Variables: declaring and assigning values.",\n        "Data types: numbers, strings, booleans, null, and undefined."\n      ]\n    },\n    {\n      "title": "Operators and Expressions",\n      "description": "Exploring different types of operators for calculations, comparisons, and logical operations.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter3.mp4",\n      "content": [\n        "Arithmetic operators: +, -, *, /, %, **.",\n        "Comparison operators: ==, !=, >, <, >=, <=.",\n        "Logical operators: && (AND), || (OR), ! (NOT).",\n        "Expressions and operator precedence."\n      ]\n    },\n    {\n      "title": "Control Flow: Conditional Statements",\n      "description": "Controlling the execution flow using conditional statements (if, else, else if).",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter4.mp4",\n      "content": [\n        "The if statement: executing code based on a condition.",\n        "The else statement: executing code when the if condition is false.",\n        "The else if statement: handling multiple conditions.",\n        "Nested if statements."\n      ]\n    },\n    {\n      "title": "Control Flow: Loops",\n      "description": "Understanding how to repeat code blocks using loops (for, while, do-while).",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter5.mp4",\n      "content": [\n        "The for loop: iterating over a specific range.",\n        "The while loop: repeating code as long as a condition is true.",\n        "The do-while loop: executing code at least once, then repeating based on a condition."\n      ]\n    },\n    {\n      "title": "Functions",\n      "description": "Defining reusable code blocks with functions and understanding parameters and return values.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter6.mp4",\n      "content": [\n        "Defining and calling functions.",\n        "Parameters and arguments.",\n        "Return values.",\n        "Function scope and hoisting."\n      ]\n    },\n    {\n      "title": "Arrays",\n      "description": "Working with ordered lists of data using arrays.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter7.mp4",\n      "content": [\n        "Creating arrays and accessing elements.",\n        "Modifying array elements.",\n        "Array methods: push, pop, shift, unshift, splice.",\n        "Iterating over arrays with loops."\n      ]\n    },\n    {\n      "title": "Objects",\n      "description": "Storing and organizing data with objects.",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter8.mp4",\n      "content": [\n        "Creating objects with key-value pairs.",\n        "Accessing object properties.",\n        "Modifying object properties.",\n        "Object methods.",\n        "JSON (JavaScript Object Notation)."\n      ]\n    },\n    {\n      "title": "Strings",\n      "description": "Manipulating and working with text strings.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter9.mp4",\n      "content": [\n        "String literals and escape characters.",\n        "String methods: length, charAt, indexOf, substring, slice, replace.",\n        "Concatenating strings."\n      ]\n    },\n    {\n      "title": "DOM Manipulation",\n      "description": "Interacting with HTML elements using the Document Object Model (DOM).",\n      "duration": "20 minutes",\n      "video_url": "https://www.example.com/video/chapter10.mp4",\n      "content": [\n        "Understanding the DOM.",\n        "Selecting HTML elements using selectors.",\n        "Modifying HTML elements: text content, attributes, styles.",\n        "Adding and removing elements.",\n        "Event handling."\n      ]\n    },\n    {\n      "title": "Introduction to JavaScript Libraries",\n      "description": "Discovering the power of JavaScript libraries like jQuery and React.",\n      "duration": "15 minutes",\n      "video_url": "https://www.example.com/video/chapter11.mp4",\n      "content": [\n        "Understanding the concept of libraries.",\n        "Why use JavaScript libraries.",\n        "Introducing jQuery and React."\n      ]\n    },\n    {\n      "title": "Practice and Resources",\n      "description": "Review of key concepts, practice exercises, and resources for further learning.",\n      "duration": "10 minutes",\n      "video_url": "https://www.example.com/video/chapter12.mp4",\n      "content": [\n        "Recap of important topics.",\n        "Practice projects and coding challenges.",\n        "Recommended resources for continued learning (books, websites, online courses)."\n      ]\n    }\n  ]\n}\n```\n\n**Explanation of the JSON Structure:**\n\n* **course_title:** The name of the course.\n* **course_description:** A brief summary of the course content and target audience.\n* **category:** The category the course belongs to (in this case, "Development").\n* **level:** The skill level required for the course (in this case, "Beginner").\n* **chapters:** An array containing information about each chapter. \n    * **title:** The title of the chapter.\n    * **description:** A short description of the chapter\'s content.\n    * **duration:**  The estimated time for the chapter.\n    * **video_url:**  A URL to the video content for the chapter.\n    * **content:** An array of bullet points outlining the key topics covered in the chapter.\n\n**Remember to replace the placeholder video URLs with the actual links to your video content.** This JSON structure is a good starting point for organizing your JavaScript beginner course.  Make sure you provide engaging videos, clear explanations, and practice exercises for an effective learning experience. \n',
        },
      ],
    },
  ],
});

export const chapterContentGenSession = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'chapterContentGenPrompt: Explain the concept in details on topic: "Unlock German: Your Gateway to a New World", chapter: "Simple Sentences & Verb Conjugation" in json format with list of array with field as title , explanation on given chapter in details, code example if required (Code field in <precode> format) if applicable. For more context on the topic you can follow this description: "Construct basic German sentences and learn the basics of verb conjugation." to improve the content quality',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n  {\n    "title": "Introduction: The Building Blocks of German Sentences",\n    "explanation": "Before we dive into the exciting world of verb conjugation, let\'s understand the fundamental structure of German sentences.  Just like English, German sentences typically follow a Subject-Verb-Object (SVO) order. This means the subject (who or what is performing the action) comes first, followed by the verb (the action itself), and lastly the object (what or who receives the action).  For example, in the sentence \\"The cat eats the mouse\\", \'The cat\' is the subject, \'eats\' is the verb, and \'the mouse\' is the object."\n  },\n  {\n    "title": "The Power of Word Order",\n    "explanation": "While the SVO structure is common, German has a fascinating twist: the verb often occupies a different position within the sentence depending on the type of sentence.  For example, in a simple declarative sentence (a statement), the verb usually sits in the second position.  Let\'s take a look at a few examples: \\n\\n* **Ich esse Brot.** (I eat bread) \\n\\n* **Du trinkst Wasser.** (You drink water) \\n\\n* **Er liest ein Buch.** (He reads a book) \\n\\nNotice how the verb (esse, trinkst, liest) always occupies the second position in the sentence. This structure is quite common in German and is essential for constructing grammatically correct sentences."\n  },\n  {\n    "title": "Unveiling Verb Conjugation: The Heart of German Grammar",\n    "explanation": "Verb conjugation is the process of changing the form of a verb to match the subject of the sentence. In German, verbs are often conjugated to indicate the person (I, you, he/she/it, we, you, they) and the tense (present, past, future).  This may sound complex, but it\'s actually quite logical once you grasp the basic patterns.  Let\'s take the verb \'sprechen\' (to speak) as an example: \\n\\n* **Ich spreche.** (I speak) \\n\\n* **Du sprichst.** (You speak) \\n\\n* **Er/Sie/Es spricht.** (He/She/It speaks) \\n\\n* **Wir sprechen.** (We speak) \\n\\n* **Ihr sprecht.** (You speak) \\n\\n* **Sie/Sie sprechen.** (They/Formal you speak) \\n\\nThe ending of the verb changes based on the subject, revealing the person and tense of the action."\n  },\n  {\n    "title": "Common Verbs & Their Conjugations: A Quick Guide",\n    "explanation": "To help you get started, here are some common German verbs and their conjugation in the present tense: \\n\\n* **sein** (to be):  ich bin, du bist, er/sie/es ist, wir sind, ihr seid, sie/sie sind \\n\\n* **haben** (to have): ich habe, du hast, er/sie/es hat, wir haben, ihr habt, sie/sie haben \\n\\n* **machen** (to do/make): ich mache, du machst, er/sie/es macht, wir machen, ihr macht, sie/sie machen \\n\\n* **gehen** (to go): ich gehe, du gehst, er/sie/es geht, wir gehen, ihr geht, sie/sie gehen \\n\\n* **essen** (to eat): ich esse, du isst, er/sie/es isst, wir essen, ihr esst, sie/sie essen \\n\\n* **trinken** (to drink): ich trinke, du trinkst, er/sie/es trinkt, wir trinken, ihr trinkt, sie/sie trinken \\n\\nThese are just a few examples, and you will encounter many more verbs as you explore the German language."\n  },\n  {\n    "title": "Putting it All Together: Crafting Basic German Sentences",\n    "explanation": "Now that you have a grasp of word order and verb conjugation, let\'s try constructing some basic German sentences. \\n\\n* **Ich spreche Deutsch.** (I speak German) \\n\\n* **Du trinkst Kaffee.** (You drink coffee) \\n\\n* **Er liest ein Buch.** (He reads a book) \\n\\n* **Wir essen Pizza.** (We eat pizza) \\n\\n* **Sie geht ins Kino.** (She goes to the cinema) \\n\\nBy following the SVO structure and conjugating the verbs correctly, you can express a variety of ideas in German."\n  },\n  {\n    "title": "Practice Makes Perfect: Engaging with the Language",\n    "explanation": "The key to mastering German, like any language, is practice. Start with simple sentences, gradually expanding your vocabulary and grammar skills. Don\'t be afraid to make mistakes - they are an essential part of the learning process.  Look for opportunities to speak German, whether it\'s with friends, family, or online resources.  Immerse yourself in the language and enjoy the journey of unlocking a new world of communication."\n  }\n]\n```',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: 'Explain the concept in details on topic: "Unlock German: Your Gateway to a New World", chapter: "Simple Sentences & Verb Conjugation" in json format with list of array with field as title , explanation on given chapter in details, code example if required (Code field in <precode> format) if applicable. For more context on the topic you can follow this description: "Construct basic German sentences and learn the basics of verb conjugation." to improve the content quality',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n  {\n    "title": "Building Blocks of German Sentences",\n    "explanation": "Before we dive into the exciting world of verb conjugation, let\'s understand the fundamental structure of German sentences.  Just like English, German sentences typically follow a Subject-Verb-Object (SVO) order. This means the subject (who or what is performing the action) comes first, followed by the verb (the action itself), and lastly the object (what or who receives the action).  \\n\\nFor example, in the sentence \\"The cat eats the mouse\\", \'The cat\' is the subject, \'eats\' is the verb, and \'the mouse\' is the object.  \\n\\nHowever, German has a unique twist: the verb often occupies a different position within the sentence depending on the type of sentence.  This is where verb conjugation comes into play."\n  },\n  {\n    "title": "Verb Conjugation: The Heart of German Grammar",\n    "explanation": "Verb conjugation is the process of changing the form of a verb to match the subject of the sentence. In German, verbs are often conjugated to indicate the person (I, you, he/she/it, we, you, they) and the tense (present, past, future).  \\n\\nLet\'s take the verb \'sprechen\' (to speak) as an example. Here\'s how it\'s conjugated in the present tense: \\n\\n* **Ich spreche.** (I speak) \\n* **Du sprichst.** (You speak) \\n* **Er/Sie/Es spricht.** (He/She/It speaks) \\n* **Wir sprechen.** (We speak) \\n* **Ihr sprecht.** (You speak) \\n* **Sie/Sie sprechen.** (They/Formal you speak) \\n\\nNotice how the ending of the verb changes based on the subject, revealing the person and tense of the action.  This is a key aspect of German grammar and crucial for constructing grammatically correct sentences."\n  },\n  {\n    "title": "Word Order: A German Twist",\n    "explanation": "While the SVO structure is common, German has a fascinating twist: the verb often occupies a different position within the sentence depending on the type of sentence.  \\n\\nFor example, in a simple declarative sentence (a statement), the verb usually sits in the second position.  Let\'s take a look at a few examples: \\n\\n* **Ich esse Brot.** (I eat bread) \\n* **Du trinkst Wasser.** (You drink water) \\n* **Er liest ein Buch.** (He reads a book) \\n\\nNotice how the verb (esse, trinkst, liest) always occupies the second position in the sentence. This structure is quite common in German and is essential for constructing grammatically correct sentences."\n  },\n  {\n    "title": "Common Verbs & Their Conjugations: A Quick Guide",\n    "explanation": "To help you get started, here are some common German verbs and their conjugation in the present tense: \\n\\n* **sein** (to be):  ich bin, du bist, er/sie/es ist, wir sind, ihr seid, sie/sie sind \\n* **haben** (to have): ich habe, du hast, er/sie/es hat, wir haben, ihr habt, sie/sie haben \\n* **machen** (to do/make): ich mache, du machst, er/sie/es macht, wir machen, ihr macht, sie/sie machen \\n* **gehen** (to go): ich gehe, du gehst, er/sie/es geht, wir gehen, ihr geht, sie/sie gehen \\n* **essen** (to eat): ich esse, du isst, er/sie/es isst, wir essen, ihr esst, sie/sie essen \\n* **trinken** (to drink): ich trinke, du trinkst, er/sie/es trinkt, wir trinken, ihr trinkt, sie/sie trinken \\n\\nThese are just a few examples, and you will encounter many more verbs as you explore the German language."\n  },\n  {\n    "title": "Putting it All Together: Crafting Basic German Sentences",\n    "explanation": "Now that you have a grasp of word order and verb conjugation, let\'s try constructing some basic German sentences. \\n\\n* **Ich spreche Deutsch.** (I speak German) \\n* **Du trinkst Kaffee.** (You drink coffee) \\n* **Er liest ein Buch.** (He reads a book) \\n* **Wir essen Pizza.** (We eat pizza) \\n* **Sie geht ins Kino.** (She goes to the cinema) \\n\\nBy following the SVO structure and conjugating the verbs correctly, you can express a variety of ideas in German."\n  },\n  {\n    "title": "Practice Makes Perfect: Engaging with the Language",\n    "explanation": "The key to mastering German, like any language, is practice. Start with simple sentences, gradually expanding your vocabulary and grammar skills. Don\'t be afraid to make mistakes - they are an essential part of the learning process.  Look for opportunities to speak German, whether it\'s with friends, family, or online resources.  Immerse yourself in the language and enjoy the journey of unlocking a new world of communication."\n  }\n]\n```',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: 'Explain the concept in details on topic: "learn python", chapter: "data-types" in json format with list of array with field as title , explanation on given chapter in details, code example if required (Code field in <precode> format) if applicable. For more context on the topic you can follow this description: "explore the fundamental topic of programing which is data type , with example and use cases\n" to improve the content quality',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n  {\n    "title": "Introduction to Data Types",\n    "explanation": "Data types define the kind of data a variable can hold in Python. They tell the interpreter how to interpret and manipulate the information.  Understanding data types is crucial for writing efficient and error-free code. Python offers a variety of built-in data types that cater to different programming needs."\n  },\n  {\n    "title": "Numbers: Integers and Floats",\n    "explanation": "Numbers are the foundation of many programming tasks. Python handles two main types of numbers:\\n\\n* **Integers (int):** Whole numbers without any decimal points.  \\n    * **Example:** 10, -5, 2023, 0\\n\\n* **Floating-Point Numbers (float):** Numbers with decimal points. \\n    * **Example:** 3.14, -2.5, 1.0, 0.001\\n\\n**Code Example:**\\n\\n<precode>\\nnumber1 = 10  # Integer\\nnumber2 = 3.14  # Float\\nprint(type(number1))  # Output: <class \'int\'>\\nprint(type(number2))  # Output: <class \'float\'>\\n</precode>\\n\\n**Use Cases:**\\n\\n* Calculations: Performing mathematical operations like addition, subtraction, multiplication, and division.\\n* Counting: Keeping track of iterations in loops or the number of items in a list."\n  },\n  {\n    "title": "Strings: Textual Data",\n    "explanation": "Strings represent sequences of characters, used to store and manipulate text.  They are enclosed in single or double quotes. \\n\\n**Example:**\\n\\n<precode>\\nmessage = \'Hello, world!\'  # String using single quotes\\nname = \\"Alice\\"  # String using double quotes\\n</precode>\\n\\n**Use Cases:**\\n\\n* Displaying information to the user.\\n* Processing text data like analyzing text files, extracting information from documents, or creating reports."\n  },\n  {\n    "title": "Booleans: True or False",\n    "explanation": "Booleans represent truth values, either True or False. They are often used in conditional statements and comparisons. \\n\\n**Example:**\\n\\n<precode>\\nis_raining = True\\nhas_sun = False\\n</precode>\\n\\n**Use Cases:**\\n\\n* Decision-making in programs (if-else statements).\\n* Controlling program flow based on conditions."\n  },\n  {\n    "title": "Lists: Ordered Collections",\n    "explanation": "Lists are ordered collections of items.  They can hold elements of different data types.  Lists are mutable, meaning you can change their contents after creation. \\n\\n**Example:**\\n\\n<precode>\\ncolors = [\'red\', \'green\', \'blue\']  # List of strings\\nnumbers = [1, 2, 3, 4, 5]  # List of integers\\nmixed = [\'apple\', 10, True]  # List with mixed data types\\n</precode>\\n\\n**Use Cases:**\\n\\n* Storing multiple values in a single variable.\\n* Iterating over elements using loops.\\n* Organizing and manipulating data in a sequential order."\n  },\n  {\n    "title": "Tuples: Immutable Collections",\n    "explanation": "Tuples are similar to lists but are immutable, meaning their contents cannot be changed once created. They are defined using parentheses. \\n\\n**Example:**\\n\\n<precode>\\ncoordinates = (10, 20)  # Tuple with two integers\\nstudent_info = (\'John\', 25, \'Computer Science\')  # Tuple with mixed data types\\n</precode>\\n\\n**Use Cases:**\\n\\n* Storing data that should not be modified, like database records or configuration settings.\\n* Representing fixed sets of data."\n  },\n  {\n    "title": "Sets: Unordered Collections of Unique Elements",\n    "explanation": "Sets are unordered collections that do not allow duplicate elements. They are defined using curly braces.  \\n\\n**Example:**\\n\\n<precode>\\nfruits = {\'apple\', \'banana\', \'orange\'}  # Set of strings\\n</precode>\\n\\n**Use Cases:**\\n\\n* Removing duplicate elements from a list or other collection.\\n* Performing set operations like union, intersection, and difference."\n  },\n  {\n    "title": "Dictionaries: Key-Value Pairs",\n    "explanation": "Dictionaries are unordered collections of key-value pairs.  Keys are unique and immutable, while values can be of any data type. They are defined using curly braces. \\n\\n**Example:**\\n\\n<precode>\\nuser_info = {\'name\': \'Alice\', \'age\': 30, \'occupation\': \'Software Engineer\'}\\n</precode>\\n\\n**Use Cases:**\\n\\n* Storing data that is associated with specific keys.\\n* Representing data as a structured map, like configurations, user profiles, or data from a database."\n  }\n]\n```',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: 'chapterContentGenPrompt: Explain the concept in details on topic: "Unlock German: Your Gateway to a New World", chapter: "Simple Sentences & Verb Conjugation" in json format with list of array with field as title , explanation on given chapter in details, code example if required (Code field in <precode> format) if applicable. For more context on the topic you can follow this description: "Construct basic German sentences and learn the basics of verb conjugation." to improve the content quality',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n  {\n    "title": "Building Blocks of German Sentences: The Subject-Verb-Object Order",\n    "explanation": "Before we dive into the exciting world of verb conjugation, let\'s understand the fundamental structure of German sentences.  Just like English, German sentences typically follow a Subject-Verb-Object (SVO) order. This means the subject (who or what is performing the action) comes first, followed by the verb (the action itself), and lastly the object (what or who receives the action).  \\n\\nFor example, in the sentence \\"The cat eats the mouse\\", \'The cat\' is the subject, \'eats\' is the verb, and \'the mouse\' is the object.  \\n\\nHowever, German has a unique twist: the verb often occupies a different position within the sentence depending on the type of sentence.  This is where verb conjugation comes into play."\n  },\n  {\n    "title": "Verb Conjugation: The Heart of German Grammar",\n    "explanation": "Verb conjugation is the process of changing the form of a verb to match the subject of the sentence. In German, verbs are often conjugated to indicate the person (I, you, he/she/it, we, you, they) and the tense (present, past, future).  \\n\\nLet\'s take the verb \'sprechen\' (to speak) as an example. Here\'s how it\'s conjugated in the present tense: \\n\\n* **Ich spreche.** (I speak) \\n* **Du sprichst.** (You speak) \\n* **Er/Sie/Es spricht.** (He/She/It speaks) \\n* **Wir sprechen.** (We speak) \\n* **Ihr sprecht.** (You speak) \\n* **Sie/Sie sprechen.** (They/Formal you speak) \\n\\nNotice how the ending of the verb changes based on the subject, revealing the person and tense of the action.  This is a key aspect of German grammar and crucial for constructing grammatically correct sentences."\n  },\n  {\n    "title": "Word Order: A German Twist",\n    "explanation": "While the SVO structure is common, German has a fascinating twist: the verb often occupies a different position within the sentence depending on the type of sentence.  \\n\\nFor example, in a simple declarative sentence (a statement), the verb usually sits in the second position.  Let\'s take a look at a few examples: \\n\\n* **Ich esse Brot.** (I eat bread) \\n* **Du trinkst Wasser.** (You drink water) \\n* **Er liest ein Buch.** (He reads a book) \\n\\nNotice how the verb (esse, trinkst, liest) always occupies the second position in the sentence. This structure is quite common in German and is essential for constructing grammatically correct sentences."\n  },\n  {\n    "title": "Common Verbs & Their Conjugations: A Quick Guide",\n    "explanation": "To help you get started, here are some common German verbs and their conjugation in the present tense: \\n\\n* **sein** (to be):  ich bin, du bist, er/sie/es ist, wir sind, ihr seid, sie/sie sind \\n* **haben** (to have): ich habe, du hast, er/sie/es hat, wir haben, ihr habt, sie/sie haben \\n* **machen** (to do/make): ich mache, du machst, er/sie/es macht, wir machen, ihr macht, sie/sie machen \\n* **gehen** (to go): ich gehe, du gehst, er/sie/es geht, wir gehen, ihr geht, sie/sie gehen \\n* **essen** (to eat): ich esse, du isst, er/sie/es isst, wir essen, ihr esst, sie/sie essen \\n* **trinken** (to drink): ich trinke, du trinkst, er/sie/es trinkt, wir trinken, ihr trinkt, sie/sie trinken \\n\\nThese are just a few examples, and you will encounter many more verbs as you explore the German language."\n  },\n  {\n    "title": "Putting it All Together: Crafting Basic German Sentences",\n    "explanation": "Now that you have a grasp of word order and verb conjugation, let\'s try constructing some basic German sentences. \\n\\n* **Ich spreche Deutsch.** (I speak German) \\n* **Du trinkst Kaffee.** (You drink coffee) \\n* **Er liest ein Buch.** (He reads a book) \\n* **Wir essen Pizza.** (We eat pizza) \\n* **Sie geht ins Kino.** (She goes to the cinema) \\n\\nBy following the SVO structure and conjugating the verbs correctly, you can express a variety of ideas in German."\n  },\n  {\n    "title": "Practice Makes Perfect: Engaging with the Language",\n    "explanation": "The key to mastering German, like any language, is practice. Start with simple sentences, gradually expanding your vocabulary and grammar skills. Don\'t be afraid to make mistakes - they are an essential part of the learning process.  Look for opportunities to speak German, whether it\'s with friends, family, or online resources.  Immerse yourself in the language and enjoy the journey of unlocking a new world of communication."\n  }\n]\n```',
        },
      ],
    },
  ],
});
